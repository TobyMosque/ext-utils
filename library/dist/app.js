module.exports=function(e){var c={};function t(l){if(c[l])return c[l].exports;var n=c[l]={i:l,l:!1,exports:{}};return e[l].call(n.exports,n,n.exports,t),n.l=!0,n.exports}return t.m=e,t.c=c,t.d=function(e,c,l){t.o(e,c)||Object.defineProperty(e,c,{enumerable:!0,get:l})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,c){if(1&c&&(e=t(e)),8&c)return e;if(4&c&&"object"==typeof e&&e&&e.__esModule)return e;var l=Object.create(null);if(t.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:e}),2&c&&"string"!=typeof e)for(var n in e)t.d(l,n,function(c){return e[c]}.bind(null,n));return l},t.n=function(e){var c=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(c,"a",c),c},t.o=function(e,c){return Object.prototype.hasOwnProperty.call(e,c)},t.p="",t(t.s=2)}([function(module,exports){eval('module.exports = require("vue");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcInZ1ZVwiPzY2MzAiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidnVlXCIpOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n')},function(module,exports){eval('module.exports = require("quasar");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcInF1YXNhclwiPzIxM2UiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicXVhc2FyXCIpOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n')},function(e,c,t){e.exports=t(3)},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"factory\", function() { return /* reexport */ factory; });\n__webpack_require__.d(__webpack_exports__, \"store\", function() { return /* reexport */ src_store; });\n__webpack_require__.d(__webpack_exports__, \"uuid\", function() { return /* reexport */ src_uuid; });\n__webpack_require__.d(__webpack_exports__, \"timer\", function() { return /* reexport */ timer; });\n\n// EXTERNAL MODULE: external \"vue\"\nvar external_vue_ = __webpack_require__(0);\nvar external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);\n\n// CONCATENATED MODULE: ./src/_common.js\nconst getCases = function (text) {\r\n  let cases = {}\r\n  if (text.includes('-')) {\r\n    cases.lower = text.toLowerCase()\r\n    cases.camel = cases.lower.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase(); });\r\n    cases.pascal = cases.camel[0].toUpperCase() + cases.camel.substr(1)\r\n  } else {\r\n    cases.camel = text[0].toLowerCase() + text.substr(1)\r\n    cases.pascal = text[0].toUpperCase() + text.substr(1)\r\n  }\r\n  return cases\r\n}\r\n\r\n\r\n\r\n/* harmony default export */ var _common = ({\r\n  getCases\r\n});\r\n\n// CONCATENATED MODULE: ./src/store.js\n\r\n\r\n\r\nconst store_defaultPrefixes = {\r\n  upsertPrefix: 'saveOrUpdate',\r\n  deletePrefix: 'delete'\r\n}\r\n\r\nconst getCollectionPrefixes = function () {\r\n  return store_defaultPrefixes\r\n}\r\n\r\nconst setCollectionPrefixes = function ({ upsertPrefix, deletePrefix }) {\r\n  store_defaultPrefixes.upsertPrefix = upsertPrefix || store_defaultPrefixes.upsertPrefix\r\n  store_defaultPrefixes.deletePrefix = deletePrefix || store_defaultPrefixes.deletePrefix\r\n}\r\n\r\n/**\r\n * maps all fields to a computed-like object who getters access the state and the setters do mutations.\r\n * @param {String} module - the module name\r\n * @param {String[] | Object} fields - fields can be an array of strings or a object where the keys and values are strings. e.g:` ['text', 'number', 'list']` or `{ text: 'text', number: 'number', collection: 'list' }`\r\n * @returns {Object} \r\n */\r\nconst mapState = function (module, fields) {\r\n  var props = {}\r\n  if (Array.isArray(fields)) {\r\n    fields.forEach(property => {\r\n      props[property] = {\r\n        get () {\r\n          return this.$store.state[module][property]\r\n        },\r\n        set (value) {\r\n          this.$store.commit(`${module}/${property}`, value)\r\n        }\r\n      }\r\n    })\r\n  } else {\r\n    Object.keys(fields).forEach(key => {\r\n      var property = fields[key]\r\n      props[key] = {\r\n        get () { return this.$store.state[module][property] },\r\n        set (value) { this.$store.commit(`${module}/${property}`, value) }\r\n      }\r\n    })\r\n  }\r\n  return props\r\n}\r\n\r\n/**\r\n * maps all fields to a computed-like object who getters access the getters and the setters do mutations.\r\n * @param {String} module - the module name\r\n * @param {String[] | Object} fields - fields can be an array of strings or a object where the keys and values are strings. e.g:` ['text', 'number', 'list']` or `{ text: 'text', number: 'number', collection: 'list' }`\r\n * @returns {Object} \r\n */\r\nconst mapGetters = function (module, fields) {\r\n  let props = {}\r\n  if (Array.isArray(fields)) {\r\n    fields.forEach(property => {\r\n      props[property] = {\r\n        get () {\r\n          return this.$store.getters[`${module}/${property}`]\r\n        },\r\n        set (value) {\r\n          this.$store.commit(`${module}/${property}`, value)\r\n        }\r\n      }\r\n    })\r\n  } else {\r\n    Object.keys(fields).forEach(key => {\r\n      let property = fields[key]\r\n      props[key] = {\r\n        get () { return this.$store.getters[`${module}/${property}`] },\r\n        set (value) { this.$store.commit(`${module}/${property}`, value) }\r\n      }\r\n    })\r\n  }\r\n  return props\r\n}\r\n\r\n/**\r\n * maps all classes fields to a mutations-like object.\r\n * @param {*} Model - class used to model the mutations object \r\n * @returns {Object} a object with the mapped mutations\r\n */\r\nconst mapStoreMutations = function (Model) {\r\n  const keys = Object.keys(new Model())\r\n  const mutations = keys.reduce((mutations, key) => {\r\n    mutations[key] = function (state, value) {\r\n      external_vue_default.a.set(state, key, value)\r\n    }\r\n    return mutations\r\n  }, {})\r\n  return mutations\r\n}\r\n\r\n/**\r\n * The complete Triforce, or one or more components of the Triforce.\r\n * @typedef {Object} CollectionItem\r\n * @property {String} single - the single form of the collection (item, person, job)\r\n * @property {String} plural - the plural form of the collection (list, people, jobs), would be the same as in the state\r\n * @property {String} id - the name of the id field of the object in the collection\r\n * @property {Object} type - the type of the objects in the array\r\n * @property {String} [upsertPrefix='saveOrUpdate'] - prefix of the save or update action\r\n * @property {String} [deletePrefix='delete'] - prefix of the delete action\r\n */\r\n\r\n/**\r\n * Create `mutations` (create, update, delete, setters), `actions` (upsert, delete, setters) and `getters` (index, getById) related to array fields.\r\n * @param {CollectionItem[]} collections - an array of objects that describes your collection\r\n * @returns {Object} a object with the mapped mutations, actions and getters\r\n */\r\nconst mapStoreCollections = function (collections) {\r\n  let mutations = {}\r\n  let actions = {}\r\n  let getters = {}\r\n  let hasTypes = collections.some(collection => collection.type !== void 0)\r\n  if (hasTypes) {\r\n    mutations.setPropertyOfACollectionItem = function (state, { index, collection, property, value }) {\r\n      external_vue_default.a.set(state[collection][index], property, value)\r\n    }\r\n    actions.setPropertyOfACollectionItem = function ({ commit, getters }, { id, collection, property, value }) {\r\n      const index = getters[collection + 'Index'].get(id)\r\n      if (index !== undefined) {\r\n        commit('setPropertyOfACollectionItem', { index, collection, property, value })\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let collection of collections) {\r\n    let single = getCases(collection.single)\r\n    let plural = getCases(collection.plural)\r\n\r\n    mutations[`create${single.pascal}`] = function (state, item) {\r\n      state[collection.plural].push(item)\r\n    }\r\n    mutations[`update${single.pascal}`] = function (state, { index, item }) {\r\n      external_vue_default.a.set(state[collection.plural], index, item)\r\n    }\r\n    mutations[`delete${single.pascal}`] = function (state, index) {\r\n      external_vue_default.a.delete(state[collection.plural], index)\r\n    }\r\n\r\n    let upsertPrefix = collection.upsertPrefix || store_defaultPrefixes.upsertPrefix\r\n    let deletePrefix = collection.deletePrefix || store_defaultPrefixes.deletePrefix\r\n    actions[`${upsertPrefix}${single.pascal}`] = function ({ commit, getters }, item) {\r\n      let index = getters[`${plural.camel}Index`].get(item[collection.id])\r\n      if (index !== void 0) {\r\n        commit(`update${single.pascal}`, { index, item })\r\n      } else {\r\n        commit(`create${single.pascal}`, item)\r\n      }\r\n    }\r\n    actions[`${deletePrefix}${single.pascal}`] = function ({ commit, getters }, id) { \r\n      let index = getters[`${plural.camel}Index`].get(id)\r\n      if (index !== void 0) {\r\n        commit(`delete${single.pascal}`, index)\r\n      }\r\n    }\r\n\r\n    if (collection.type !== void 0) {\r\n      let properties = Object.keys(new collection.type())\r\n      for (const property of properties) {\r\n        const names = getCases(property)\r\n        let conjunction = single.pascal.match(/^[aeiou].*/i) ? 'An' : 'A'\r\n        actions[`set${names.pascal}Of${conjunction}${single.pascal}`] = function ({ dispatch }, { id, value }) {\r\n          return dispatch('setPropertyOfACollectionItem', { id, collection: collection.plural, property, value })\r\n        }\r\n      }\r\n    }\r\n\r\n    getters[`${plural.camel}Index`] = function (state) {\r\n      let _collection = state[collection.plural] || []\r\n      return _collection.reduce((map, item, indice) => {\r\n        map.set(item[collection.id], indice)\r\n        return map\r\n      }, new Map())\r\n    }\r\n    getters[`${single.camel}ById`] = function (state, getters) {\r\n      return (id) => {\r\n        let index = getters[`${plural.camel}Index`].get(id)\r\n        return index !== void 0 ? state[collection.plural][index] : null\r\n      }\r\n    }\r\n  }\r\n  \r\n  return {\r\n    mutations,\r\n    actions,\r\n    getters\r\n  }\r\n}\r\n\r\n /**\r\n * The complete Triforce, or one or more components of the Triforce.\r\n * @typedef {Object} ComplexType\r\n * @property {String} name - the name of the field\r\n * @property {Object} type - the type of the object\r\n */\r\n\r\n/**\r\n * Create `mutations` (setters) related to complex fields.\r\n * @param {ComplexType[]} complexTypes - an array of objects that describes your collection\r\n * @returns {Object} a object with the mapped mutations\r\n */\r\nconst mapStoreComplexTypes = function (complexTypes) {\r\n  let mutations = {}\r\n  for (let complexType of complexTypes) {\r\n    let properties = Object.keys(new complexType.type())\r\n    let typeName = getCases(complexType.name)\r\n    for (const property of properties) {\r\n      const name = getCases(property)\r\n      mutations[`set${name.pascal}Of${typeName.pascal}`] = function (state, value) {\r\n        external_vue_default.a.set(state[complexType.name], property, value)\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    mutations\r\n  }\r\n}\r\n\r\n/**\r\n * Create `mutations` (setters) related to complex fields.\r\n * @param {String} module - the module name\r\n * @param {CollectionItem} params - an array of objects that describes your collection\r\n * @returns {Object} a object with the mapped mutations\r\n */\r\nconst mapCollectionItemState = function (module, { id, single, type, upsertPrefix }) {\r\n  let moduleName = module\r\n  let setModuleName = function (name) {\r\n    moduleName = name\r\n  }\r\n  let name = getCases(single)\r\n  let computed = {}\r\n\r\n  let getEntityById = `${name.camel}ById`\r\n  let entityName = `__${single}`\r\n  computed[getEntityById] = function () {\r\n    return this.$store.getters[`${moduleName}/${getEntityById}`]\r\n  }\r\n  computed[entityName] = function () {\r\n    return this[getEntityById](this[id])\r\n  }\r\n\r\n  let properties = Object.keys(new type())\r\n  for (const property of properties) {\r\n    const propName = getCases(property)\r\n    let conjunction = name.camel.match(/^[aeiou].*/i) ? 'An' : 'A'\r\n    let actionName = `set${propName.pascal}Of${conjunction}${name.pascal}`\r\n    computed[property] = {\r\n      get () {\r\n        return this[entityName][property]\r\n      },\r\n      set (value) {\r\n        this.$store.dispatch(`${moduleName}/${actionName}`, { id: this[id], value })\r\n      }\r\n    }\r\n  }\r\n\r\n  upsertPrefix = upsertPrefix || store_defaultPrefixes.upsertPrefix\r\n  computed[single] = {\r\n    get () {\r\n      let entity = {}\r\n      let scope = this\r\n      for (const property of properties) {\r\n        Object.defineProperty(entity, property, {\r\n          get () { return scope[property] },\r\n          set (value) { scope[property] = value }\r\n        })\r\n      }\r\n      return entity\r\n    },\r\n    set (value) {\r\n      let upsertAction = `${moduleName}/${upsertPrefix}${name.pascal}`\r\n      this.$store.dispatch(upsertAction, value)\r\n    }\r\n  }\r\n\r\n  return {\r\n    setModuleName,\r\n    computed\r\n  }\r\n}\r\n\r\n/**\r\n * Create `mutations` (setters) related to complex fields.\r\n * @param {String} module - the module name\r\n * @param {ComplexType} params - an array of objects that describes your collection\r\n * @returns {Object} a object with the mapped mutations\r\n */\r\nconst mapComplexTypeState = function (module, { name, type }) {\r\n  let moduleName = module\r\n  let setModuleName = function (name) {\r\n    moduleName = name\r\n  }\r\n  let single = getCases(name)\r\n  let computed = {}\r\n\r\n  let properties = Object.keys(new type())\r\n  for (const property of properties) {\r\n    const propName = getCases(property)\r\n    let actionName = `set${propName.pascal}Of${single.pascal}`\r\n    computed[property] = {\r\n      get () {\r\n        return this.$store.state[moduleName][name][property]\r\n      },\r\n      set (value) {\r\n        this.$store.commit(`${moduleName}/${actionName}`, value)\r\n      }\r\n    }\r\n  }\r\n\r\n  computed[name] = {\r\n    get () {\r\n      let entity = {}\r\n      let scope = this\r\n      for (const property of properties) {\r\n        Object.defineProperty(entity, property, {\r\n          get () { return scope[property] },\r\n          set (value) { scope[property] = value }\r\n        })\r\n      }\r\n      return entity\r\n    },\r\n    set (value) {\r\n      this.$store.commit(`${moduleName}/${name}`, value)\r\n    }\r\n  }\r\n\r\n  return {\r\n    setModuleName,\r\n    computed\r\n  }\r\n}\r\n\r\n\r\n\r\n/* harmony default export */ var src_store = ({\r\n  getCollectionPrefixes,\r\n  setCollectionPrefixes,\r\n  mapState,\r\n  mapGetters,\r\n  mapStoreMutations,\r\n  mapStoreCollections,\r\n  mapStoreComplexTypes,\r\n  mapCollectionItemState,\r\n  mapComplexTypeState\r\n});\r\n\n// EXTERNAL MODULE: external \"quasar\"\nvar external_quasar_ = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./src/uuid.js\n\r\n\r\n/**\r\n * creates a comb (combined time-uuid)\r\n * @param {*} date - date used to create the COMB\r\n * @returns {String} returns a combined time-uuid (comb)\r\n */\r\nconst uuid_comb = function (date) {\r\n  if (!date) {\r\n    date = new Date()\r\n  }\r\n  let uuid = Object(external_quasar_[\"uid\"])()\r\n  let comb = ('00000000000' + date.getTime().toString(16)).substr(-12)\r\n  comb = comb.slice(0, 8) + '-' + comb.slice(8, 12)\r\n  return uuid.replace(uuid.slice(0, 13), comb)\r\n}\r\n\r\n/**\r\n * extract the date part of the comb\r\n * @param {String} comb a combined time-uuid (comb)\r\n * @returns {Date} the date part of the comb\r\n */\r\nconst extract = function (comb) {\r\n  let text = comb.replace(/-/g, '').substr(0, 12)\r\n  let time = parseInt(text, 16)\r\n  return new Date(time)\r\n}\r\n\r\n\r\n\r\n/* harmony default export */ var src_uuid = ({\r\n  comb: uuid_comb,\r\n  extract\r\n});\r\n\n// CONCATENATED MODULE: ./src/factory.js\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * The complete Triforce, or one or more components of the Triforce.\r\n * @typedef {Object} ComponentFactory\r\n * @param {Function} render - callback function that is called everytime the component is rendered: render ({ self, options }) { }\r\n * @param {Function} setup - callback function that is called when the component is ready to be returned: setup({ component }) { }\r\n */\r\n\r\n /**\r\n * The complete Triforce, or one or more components of the Triforce.\r\n * @typedef {Object} CollectionItem\r\n * @property {String} single - the single form of the collection (item, person, job)\r\n * @property {String} plural - the plural form of the collection (list, people, jobs), would be the same as in the state\r\n * @property {String} id - the name of the id field of the object in the collection\r\n * @property {Object} type - the type of the objects in the array\r\n * @property {String} [upsertPrefix='saveOrUpdate'] - prefix of the save or update action\r\n * @property {String} [deletePrefix='delete'] - prefix of the delete action\r\n */\r\n\r\n /**\r\n * The complete Triforce, or one or more components of the Triforce.\r\n * @typedef {Object} ComplexType\r\n * @property {String} name - the name of the field\r\n * @property {Object} type - the type of the object\r\n */\r\n\r\n/**\r\n * wrapper a component and allow them to be modified at the render time, or even setup your properties, slots, etc.\r\n * @param {Object} param\r\n * @param {String} param.name - component's name\r\n * @param {Object} param.component - component to be wrapped\r\n * @param {Function} param.render - callback function that is called everytime the component is rendered: render ({ self, options }) { }\r\n * @param {Function} param.setup - callback function that is called when the component is ready to be returned: setup({ component }) { }\r\n * @param {Function} [param.createElement=function (h, component, options) {\r\n     return h(component, options)\r\n   }]\r\n * @param {ComponentFactory[]} param.factories - array of objects with a render and/or setup field\r\n */\r\nconst factory_component = function ({ name, component, render, setup, createElement, factories }) {\r\n  const props = component.options.props\r\n  const computed = {}\r\n  if (props.value) {\r\n    computed.__value = {\r\n      get () { return this.value },\r\n      set (value) { return this.$emit('input', value) }\r\n    }\r\n  }\r\n  const methods = Object.keys(component.options.methods || {}).reduce((methods, key) => {\r\n    methods[key] = function (...args) {\r\n      let root = this.$refs.root\r\n      return root[key].apply(root, args)\r\n    }\r\n    return methods\r\n  }, {})\r\n\r\n  factories = factories || []\r\n  const renders = factories.filter(item => item.render).map(item => item.render)\r\n  if (render) {\r\n    renders.push(render)\r\n  }\r\n\r\n  const setups = factories.filter(item => item.setup).map(item => item.setup)\r\n  if (setup) {\r\n    setups.push(setup)\r\n  }\r\n\r\n  if (!createElement) {\r\n    createElement = function (h, component, options) {\r\n      return h(component, options)\r\n    }\r\n  }\r\n  let wrapper = {\r\n    name: name,\r\n    props: props,\r\n    methods: methods,\r\n    computed: computed,\r\n    render (h) {\r\n      let self = this\r\n      let key = this.$vnode.key\r\n      let options = {\r\n        key: key,\r\n        ref: 'root',\r\n        scopedSlots: this.$scopedSlots,\r\n        attrs: this.$attrs\r\n      }\r\n      if (props.value) {\r\n        let { values, ...props } = this.$props\r\n        let { input, ...listeners } = this.$listeners\r\n        props.value = self.__value\r\n        listeners.input = function (value) {\r\n          self.__value = value\r\n        }\r\n        options.props = props\r\n        options.on = listeners\r\n      } else {\r\n        let { ...props } = this.$props\r\n        let { ...listeners } = this.$listeners\r\n        options.props = props\r\n        options.on = listeners\r\n      }\r\n\r\n      for (let render of renders) {\r\n        render({ self, options })\r\n      }\r\n      return createElement(h, component, options)\r\n    }\r\n  }\r\n  for (let setup of setups) {\r\n    setup({ component: wrapper })\r\n  }\r\n  return wrapper\r\n}\r\n\r\nconst __component = factory_component\r\n\r\n/**\r\n * @param {String|Object} options\r\n * @param {Object} component\r\n * @param {Object} brand\r\n * @param {String|Object|Array} brand.style\r\n * @param {String|Object|Array} brand.class\r\n * @param {Object} brand.props\r\n */\r\nconst reBrand = function (options, component, brand) {\r\n  let name = '', cname = '', register = null\r\n  if (typeof options === 'object') {\r\n    name = options.name\r\n    cname = options.cname\r\n    component = options.component\r\n    brand = options.brand\r\n    register = options.register\r\n  } else {\r\n    name = options\r\n  }\r\n  if (!cname) {\r\n    cname = getCases(name).pascal\r\n  }\r\n  if (!register) {\r\n    register = function (name, component) {\r\n      external_vue_default.a.component(name, component)\r\n    }\r\n  }\r\n\r\n  var keys = Object.keys(brand.props || {})\r\n  register(name, __component({\r\n    name: cname || component.name,\r\n    component,\r\n    render ({ self, options }) {\r\n      if (brand.style) {\r\n        options.style = brand.style\r\n      }\r\n      if (brand.class) {\r\n        options.class = brand.class\r\n      }\r\n      for (const prop of keys) {\r\n        options.props[prop] = options.props[prop] === undefined ? brand.props[prop] : options.props[prop]\r\n      }\r\n      return null\r\n    },\r\n    setup ({ component }) {\r\n      for (const prop of keys) {\r\n        component.props[prop].default = () => undefined\r\n      }\r\n    }\r\n  }))\r\n}\r\n\r\nconst merge = function ({ name, model, collections, complexTypes, user }) {\r\n  let conditions = [\r\n    model && model[name],\r\n    collections && collections[name],\r\n    !!user\r\n  ].filter(condition => condition)\r\n\r\n  if (conditions.length > 1) {\r\n    let merged = {}\r\n    let isFunc = false\r\n    if (user) {\r\n      isFunc = isFunc || user.call\r\n      merged = user.call ? { ...merged, ...user() } : { ...merged, ...user }\r\n    }\r\n    if (model && model[name]) {\r\n      isFunc = isFunc || model[name].call\r\n      merged = model[name].call ? { ...merged, ...model[name]() } : { ...merged, ...model[name] }\r\n    }\r\n    if (collections && collections[name]) {\r\n      isFunc = isFunc || collections[name].call\r\n      merged = collections[name].call ? { ...merged, ...collections[name]() } : { ...merged, ...collections[name] }\r\n    }\r\n    if (complexTypes && complexTypes[name]) {\r\n      isFunc = isFunc || complexTypes[name].call\r\n      merged = complexTypes[name].call ? { ...merged, ...complexTypes[name]() } : { ...merged, ...complexTypes[name] }\r\n    }\r\n    if (isFunc) {\r\n      let __merged = merged\r\n      merged = function () {\r\n        return JSON.parse(JSON.stringify(__merged))\r\n      }\r\n    }\r\n    return merged\r\n  } else if (model && model[name]) {\r\n    return model[name]\r\n  } else if (collections && collections[name]) {\r\n    return collections[name]\r\n  } else if (complexTypes && complexTypes[name]) {\r\n    return complexTypes[name]\r\n  } else {\r\n    return user\r\n  }\r\n}\r\n\r\nconst preperValidation = function ({ store, fields }) {\r\n  store.mutations = store.mutations || {}\r\n  const fieldKeys = Object.keys(fields)\r\n  for (const field of fieldKeys) {\r\n    store.mutations[field] = function (state, value) { state[field] = value }\r\n  }\r\n  \r\n  store.state = store.state || {}\r\n  let isFunc = !!store.state.call\r\n  if (isFunc) {\r\n    store.state = store.state()\r\n  }\r\n  for (const field of fieldKeys) {\r\n    store.state[field] = fields[field]\r\n  }\r\n  if (isFunc) {\r\n    let obj = store.state\r\n    store.state = function () {\r\n      return { ...obj }\r\n    }\r\n  }\r\n}\r\n\r\nconst validationField = '@@'\r\nconst fetchedField = '@tmu_fetched'\r\n/**\r\n * factory.store combines store.mapStoreMutations and store.mapStoreCollections.\r\n * @param {Object} param - the page properties (`created`, `computed`, `etc`)\r\n * @param {Object} param.options - options used to generate the page\r\n * @param {Object} param.options.model - class used to model the mutations object\r\n * @param {CollectionItem[]} param.options.collections - an array of objects that describes your collection\r\n * @param {ComplexType[]} param.options.collections - an array of objects that describes your collection\r\n * @param {String} param.state - module's state, that will be merged intro the final module\r\n * @param {String} param.mutations - module's mutations, that will be merged intro the final module\r\n * @param {String} param.actions - module's actions, that will be merged intro the final module\r\n * @param {String} param.getters - module's getters, that will be merged intro the final module\r\n */\r\nconst factory_store = function ({ options, initialize, ...store }) {\r\n  let model, collections, complexTypes\r\n  if (options && options.model) {\r\n    model = {\r\n      state: function () {\r\n        return new options.model()\r\n      },\r\n      mutations: mapStoreMutations(options.model)\r\n    }\r\n  }\r\n  if (options && options.collections && options.collections.length > 0) {\r\n    collections = mapStoreCollections(options.collections)\r\n  }\r\n  if (options && options.complexTypes && options.complexTypes.length > 0) {\r\n    complexTypes = mapStoreComplexTypes(options.complexTypes)\r\n  }\r\n\r\n  preperValidation({ store, fields: { [validationField]: 0, [fetchedField]: false } })\r\n  store.namespaced = true\r\n  store.state = merge({ name: 'state', model, collections, complexTypes,  user: store.state })\r\n  store.mutations = merge({ name: 'mutations', model, collections, complexTypes, user: store.mutations }) || {}\r\n  store.actions = merge({ name: 'actions', model, collections, complexTypes, user: store.actions }) || {}\r\n  store.getters = merge({ name: 'getters', model, collections, complexTypes, user: store.getters })\r\n  if (!store.actions.initialize) {\r\n    store.actions.initialize = initialize || function (context, values) {}\r\n  }\r\n  return store\r\n}\r\n\r\n/**\r\n * factory.page will expect the same options as factory.store and will map the state, mutations, actions and getters generated by factory.store to the page.\r\n * @param {Object} param - the page properties (`created`, `computed`, `etc`)\r\n * @param {Object} param.options - options used to generate the page\r\n * @param {Object} param.options.model - class used to model the mutations object\r\n * @param {CollectionItem[]} param.options.collections - an array of objects that describes your collection\r\n * @param {Object} param.storeModule - if not null, it'll be registered in the preFetch or in the created hook, and removed in the destroyed hook.\r\n * @param {String} param.moduleName - the prefix of the private fields used by the getters and setters\r\n */\r\nconst factory_page = function ({ options, storeModule, moduleName, ...page }) {\r\n  let { preFetch, created, mounted, destroyed } = page\r\n\r\n  const checkModule = function ({ store, success, failure }) {\r\n    if (storeModule.mutations[validationField]) {\r\n      let comb = src_uuid.comb()\r\n      let mutationName = `${moduleName}/${validationField}`\r\n      if (store.state[moduleName] && store._mutations[mutationName]) {\r\n        store.commit(mutationName, comb)\r\n        let value = (store.state[moduleName] || {})[validationField]\r\n        if (value === comb) {\r\n          if (success) success()\r\n        } else {\r\n          if (failure) failure()\r\n        }\r\n      } else if (failure) {\r\n        failure()\r\n      }\r\n    }\r\n  }\r\n\r\n  if (storeModule) {\r\n    page.preFetch = function (context) {\r\n      let self = this\r\n      let { store, currentRoute, previousRoute, redirect } = context\r\n      checkModule({\r\n        store,\r\n        success () {\r\n          store.unregisterModule(moduleName)\r\n        }\r\n      })\r\n      store.registerModule(moduleName, storeModule)\r\n      let fetched = store.state[moduleName] && store.state[moduleName][fetchedField]\r\n      if (!fetched) {\r\n        fetched = store.dispatch(`${moduleName}/initialize`, {\r\n          route: currentRoute,\r\n          from: previousRoute,\r\n          next: redirect\r\n        }).finally(function () {\r\n          store.commit(`${moduleName}/${fetchedField}`, true)\r\n        })\r\n        store.commit(`${moduleName}/${fetchedField}`, fetched)\r\n      }\r\n      if (!fetched.then) {\r\n        fetched = Promise.resolve()\r\n      }\r\n      return fetched.then(function () {\r\n        if (preFetch) {\r\n          return preFetch.apply(self, [ context ])\r\n        }\r\n      })\r\n    }\r\n  \r\n    page.created = function () {\r\n      let self = this\r\n      let fetched  = this.$store.state[moduleName] && this.$store.state[moduleName][fetchedField]\r\n      checkModule({\r\n        store: this.$store,\r\n        failure () {\r\n          self.$store.registerModule(moduleName, storeModule, { preserveState: fetched === true })\r\n        }\r\n      })\r\n      if (created) {\r\n        created.apply(self, [])\r\n      }\r\n    }\r\n\r\n    page.mounted = function () {\r\n      let self = this\r\n      let fetched  = this.$store.state[moduleName] && this.$store.state[moduleName][fetchedField]\r\n      if (!fetched) {\r\n        const args = this.$route ? {\r\n          route: this.$route,\r\n          next: this.$router.replace.bind(this.$router)\r\n        } : undefined\r\n\r\n        fetched = this.$store.dispatch(`${moduleName}/initialize`, args).finally(function () {\r\n          self.$store.commit(`${moduleName}/${fetchedField}`, true)\r\n        })\r\n        this.$store.commit(`${moduleName}/${fetchedField}`, fetched)\r\n      }\r\n      if (mounted) {\r\n        mounted.apply(self, [])\r\n      }\r\n    }\r\n  \r\n    page.destroyed = function () {\r\n      let self = this\r\n      if (destroyed) {\r\n        destroyed.apply(self, [])\r\n      }\r\n      checkModule({\r\n        store: this.$store,\r\n        success () {\r\n          self.$store.unregisterModule(moduleName)\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  if (options && options.model) {\r\n    let keys = Object.keys(new options.model())\r\n    page.computed = {\r\n      ...page.computed,\r\n      ...mapState(moduleName, keys)\r\n    }\r\n  }\r\n\r\n  if (options && options.collections) {\r\n    let actions = {}\r\n    let getters = {}\r\n    let defaultPrefixes = getCollectionPrefixes()\r\n    let hasTypes = options.collections.some(collection => collection.type !== void 0)\r\n    if (hasTypes) {\r\n      actions.setPropertyOfACollectionItem = function ({ id, collection, property, value }) {\r\n        return this.$store.dispatch(`${moduleName}/setPropertyOfACollectionItem`, { id, collection, property, value })\r\n      }\r\n    }\r\n\r\n    for (let collection of options.collections) {\r\n      let single = getCases(collection.single)\r\n      let plural = getCases(collection.plural)\r\n      let upsertPrefix = collection.upsertPrefix || defaultPrefixes.upsertPrefix\r\n      let deletePrefix = collection.deletePrefix || defaultPrefixes.deletePrefix\r\n      actions[`${upsertPrefix}${single.pascal}`] = function (item) {\r\n        return this.$store.dispatch(`${moduleName}/${upsertPrefix}${single.pascal}`, item)\r\n      }\r\n      actions[`${deletePrefix}${single.pascal}`] = function (id) {\r\n        return this.$store.dispatch(`${moduleName}/${deletePrefix}${single.pascal}`, id)\r\n      }\r\n      getters[`${plural.camel}Index`] = function () {\r\n        let getter = this.$store.getters[`${moduleName}/${moduleName}/${plural.camel}Index`]\r\n        if (getter) {\r\n          return getter\r\n        } else {\r\n          let state = this.$store.state[moduleName]\r\n          return storeModule.getters[`${plural.camel}Index`](state, this)\r\n        }\r\n      }\r\n      getters[`${single.camel}ById`] = function () {\r\n        let getter = this.$store.getters[`${moduleName}/${single.camel}ById`]\r\n        if (getter) {\r\n          return getter\r\n        } else {\r\n          let state = this.$store.state[moduleName]\r\n          return storeModule.getters[`${single.camel}ById`](state, this)\r\n        }\r\n      }\r\n      if (collection.type !== void 0) {\r\n        let properties = Object.keys(new collection.type())\r\n        for (const property of properties) {\r\n          let name = getCases(property)\r\n          let conjunction = single.pascal.match(/^[aeiou].*/i) ? 'An' : 'A'\r\n          let actionName = `set${name.pascal}Of${conjunction}${single.pascal}`\r\n          actions[actionName] = function ({ id, value }) {\r\n            return this.$store.dispatch(`${moduleName}/${actionName}`, { id, collection: collection.plural, property, value })\r\n          }\r\n        }\r\n      }\r\n    }\r\n    page.computed = {\r\n      ...page.computed,\r\n      ...getters\r\n    }\r\n    page.methods = {\r\n      ...page.methods,\r\n      ...actions\r\n    }\r\n  }\r\n  if (options && options.complexTypes) {\r\n    let getters = {}\r\n    for (let complexType of options.complexTypes) {\r\n      let properties = Object.keys(new complexType.type())\r\n      let typeName = getCases(complexType.name)\r\n      for (const property of properties) {\r\n        const name = getCases(property)\r\n        const camelName = `${name.camel}Of${typeName.pascal}`\r\n        const pascalName = `set${name.pascal}Of${typeName.pascal}`\r\n        getters[camelName] = {\r\n          get () {\r\n            return this.$store.state[moduleName][complexType.name][property]\r\n          },\r\n          set (value) {\r\n            this.$store.commit(`${moduleName}/${pascalName}`, value)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    page.computed = {\r\n      ...page.computed,\r\n      ...getters\r\n    }\r\n  }\r\n  return page\r\n}\r\n\r\n\r\n\r\n/* harmony default export */ var factory = ({\r\n  reBrand,\r\n  component: factory_component,\r\n  store: factory_store,\r\n  page: factory_page\r\n});\r\n\n// CONCATENATED MODULE: ./src/timer.js\n/**\r\n * creates a Promise who does nothing and will be resolved in x milliseconds\r\n * @param {Number} delay - time in milliseconds to suspend the current process.\r\n * @returns {Promise}\r\n */\r\nconst sleep = function (delay) {\r\n  return new Promise(function (resolve) {\r\n    setTimeout(resolve, delay)\r\n  })\r\n}\r\n\r\n\r\n\r\n/* harmony default export */ var timer = ({\r\n  sleep\r\n});\r\n\n// CONCATENATED MODULE: ./src/index.js\n\r\n\r\n\r\n\r\n\r\n\r\n/* harmony default export */ var src = __webpack_exports__[\"default\"] = ({ factory: factory, store: src_store, uuid: src_uuid, timer: timer });\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n")}]);